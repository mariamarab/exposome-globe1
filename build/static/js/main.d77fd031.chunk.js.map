{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","am4core","am4themes_animated","App","chart","am4charts","exporting","menu","filePrefix","colors","saturation","step","next","dataSource","url","parser","options","useColumnNames","dataFields","fromName","toName","value","nodePadding","minNodeSize","sortBy","fontSize","fontFamily","nodeTemplate","nodes","template","propertyFields","fill","events","on","event","node","target","outgoingDataItems","each","dataItem","toNode","link","isHover","label","incomingDataItems","fromNode","relativeRotation","fillOpacity","marginTop","states","create","properties","cursorOverStyle","pointer","linkTemplate","links","strokeOpacity","tooltipText","colorMode","clickable","hoverState","this","dispose","id","style","width","height","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,qMCO3CC,IAAiBC,K,IAiLFC,E,4LA3KbF,IAAiBC,KAGjB,IAAIE,EAAQH,IAAe,WAAYI,KACvCD,EAAME,UAAUC,KAAO,IAAIN,IAC3BG,EAAME,UAAUE,WAAa,iBAK7BJ,EAAMK,OAAOC,WAAa,IAC1BN,EAAMK,OAAOE,KAAO,EAERP,EAAMK,OAAOG,OACbR,EAAMK,OAAOG,OACbR,EAAMK,OAAOG,OACbR,EAAMK,OAAOG,OACbR,EAAMK,OAAOG,OACbR,EAAMK,OAAOG,OAOzBR,EAAMS,WAAWC,IAAM,4CACvBV,EAAMS,WAAWC,IAAM,WACvBV,EAAMS,WAAWE,OAAS,IAAId,IAC9BG,EAAMS,WAAWE,OAAOC,QAAQC,gBAAiB,EAGjDb,EAAMc,WAAWC,SAAW,cAC5Bf,EAAMc,WAAWE,OAAS,cAC1BhB,EAAMc,WAAWG,MAAQ,OAGzBjB,EAAMkB,YAAc,GACpBlB,EAAMmB,YAAc,IACpBnB,EAAMoB,OAAS,OACfpB,EAAMqB,SAAW,GAEjBrB,EAAMsB,WAAa,YAInB,IAAIC,EAAevB,EAAMwB,MAAMC,SAC/BF,EAAaG,eAAeC,KAAO,QAMnCJ,EAAaK,OAAOC,GAAG,QAAQ,SAASC,GACpC,IAAIC,EAAOD,EAAME,OACjBD,EAAKE,kBAAkBC,MAAK,SAASC,GAC9BA,EAASC,SACRD,EAASE,KAAKC,SAAU,EACxBH,EAASC,OAAOG,MAAMD,SAAU,MAGxCP,EAAKS,kBAAkBN,MAAK,SAASC,GAC9BA,EAASM,WACRN,EAASE,KAAKC,SAAU,EACxBH,EAASM,SAASF,MAAMD,SAAU,MAG1CP,EAAKQ,MAAMD,SAAU,KAIzBf,EAAaK,OAAOC,GAAG,OAAO,SAASC,GACnC,IAAIC,EAAOD,EAAME,OACjBD,EAAKE,kBAAkBC,MAAK,SAASC,GAC9BA,EAASC,SACRD,EAASE,KAAKC,SAAU,EACxBH,EAASC,OAAOG,MAAMD,SAAU,MAGxCP,EAAKS,kBAAkBN,MAAK,SAASC,GAC9BA,EAASM,WACRN,EAASE,KAAKC,SAAU,EAC1BH,EAASM,SAASF,MAAMD,SAAU,MAGxCP,EAAKQ,MAAMD,SAAU,KAIzB,IAAIC,EAAQhB,EAAagB,MACzBA,EAAMG,iBAAmB,GACzBH,EAAMI,YAAc,GACpBJ,EAAMK,UAAa,IACLL,EAAMM,OAAOC,OAAO,SAC1BC,WAAWJ,YAAc,EAGjCpB,EAAayB,gBAAkBnD,IAAyBoD,QA0CxD,IAAIC,EAAelD,EAAMmD,MAAM1B,SAC/ByB,EAAaE,cAAgB,EAC7BF,EAAaP,YAAc,IAC3BO,EAAaG,YAAc,0CAG3BH,EAAaI,UAAY,QACzBJ,EAAaxB,eAAeC,KAAO,aAEnC3B,EAAMoB,OAAS,OACf8B,EAAaK,WAAY,EAEzB,IAAIC,EAAaN,EAAaL,OAAOC,OAAO,SAC5CU,EAAWT,WAAWJ,YAAc,EACpCa,EAAWT,WAAWK,cAAgB,EAGpCK,KAAKzD,MAAQA,I,6CAITyD,KAAKzD,OACPyD,KAAKzD,MAAM0D,Y,+BAKb,OACE,yBAAKC,GAAG,WAAWC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,e,GA1KvCC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d77fd031.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\nclass App extends Component {\n  componentDidMount() {\n\n  // Themes\n  am4core.useTheme(am4themes_animated);\n  // am4core.useTheme(am4themes_material);\n\n  var chart = am4core.create(\"chartdiv\", am4charts.ChordDiagram);\n  chart.exporting.menu = new am4core.ExportMenu();\n  chart.exporting.filePrefix = \"exposome-globe\";\n\n  // ?\n  // chart.titles = \"Test\";\n\n  chart.colors.saturation = 0.45;\n  chart.colors.step = 3;\n  var colors = {\n      Domain1:chart.colors.next(),\n      Domain2:chart.colors.next(),\n      Domain3:chart.colors.next(),\n      Domain4:chart.colors.next(),\n      Domain5:chart.colors.next(),\n      Domain6:chart.colors.next()\n  }\n\n  // console.log(chart_data)\n\n\n\n  chart.dataSource.url = 'data/correlations_corrected_mapped_02.csv';\n  chart.dataSource.url = 'test.csv';\n  chart.dataSource.parser = new am4core.CSVParser();\n  chart.dataSource.parser.options.useColumnNames = true;\n\n  // Read data from JSON file\n  chart.dataFields.fromName = \"var1_domain\";\n  chart.dataFields.toName = \"var2_domain\";\n  chart.dataFields.value = \"coef\";\n\n  // Chart spacing settings\n  chart.nodePadding = 0.5;\n  chart.minNodeSize = 0.01;\n  chart.sortBy = \"coef\";\n  chart.fontSize = 15;\n  // ?\n  chart.fontFamily = \"Open Sans\";\n  //hart.textDecoration\n\n  // ?\n  var nodeTemplate = chart.nodes.template;\n  nodeTemplate.propertyFields.fill = \"color\";\n  // modal\n  // popups\n\n  // Highlight links when hovering over node\n  // ?\n  nodeTemplate.events.on(\"over\", function(event) {    \n      var node = event.target;\n      node.outgoingDataItems.each(function(dataItem) {\n          if(dataItem.toNode){\n              dataItem.link.isHover = true;\n              dataItem.toNode.label.isHover = true;\n          }\n      })\n      node.incomingDataItems.each(function(dataItem) {\n          if(dataItem.fromNode){\n              dataItem.link.isHover = true;\n              dataItem.fromNode.label.isHover = true;\n          }\n      }) \n      node.label.isHover = true;   \n  })\n\n  // When un-hovering from node, un-hover over links\n  nodeTemplate.events.on(\"out\", function(event) {\n      var node = event.target;\n      node.outgoingDataItems.each(function(dataItem) {        \n          if(dataItem.toNode){\n              dataItem.link.isHover = false;                \n              dataItem.toNode.label.isHover = false;\n          }\n      })\n      node.incomingDataItems.each(function(dataItem) {\n          if(dataItem.fromNode){\n              dataItem.link.isHover = false;\n            dataItem.fromNode.label.isHover = false;\n          }\n      })\n      node.label.isHover = false;\n  })\n\n  // Node label formatting\n  var label = nodeTemplate.label;\n  label.relativeRotation = 90;\n  label.fillOpacity = 0.4;\n  label.marginTop  = 100;\n  let labelHS = label.states.create(\"hover\");\n  labelHS.properties.fillOpacity = 1;\n\n  // Hover formatting\n  nodeTemplate.cursorOverStyle = am4core.MouseCursorStyle.pointer;\n\n  // An adapter that colours the non-main node with the highest value node going into them\n  // nodeTemplate.adapter.add(\"fill\", function(fill, target) {\n  //     let node = target;\n  //     let counters = {};\n  //     let mainChar = false;\n  //     node.incomingDataItems.each(function(dataItem) {\n  //         if(colors[dataItem.toName]){\n  //             mainChar = true;\n  //         }\n\n  //         if(isNaN(counters[dataItem.fromName])){\n  //             counters[dataItem.fromName] = dataItem.value;\n  //         }\n  //         else{\n  //             counters[dataItem.fromName] += dataItem.value;\n  //         }\n  //     })\n  //     if(mainChar){\n  //         return fill;\n  //     }\n\n  //     let count = 0;\n  //     let color;\n  //     let biggest = 0;\n  //     let biggestName;\n\n  //     for(var name in counters){\n  //         if(counters[name] > biggest){\n  //             biggestName = name;\n  //             biggest = counters[name]; \n  //         }        \n  //     }\n  //     if(colors[biggestName]){\n  //         fill = colors[biggestName];\n  //     }\n    \n  //     return fill;\n  // })\n\n  // Link formatting\n  var linkTemplate = chart.links.template;\n  linkTemplate.strokeOpacity = 0;\n  linkTemplate.fillOpacity = 0.15;\n  linkTemplate.tooltipText = \"{variable1} â†’ {variable2}: {label}\";\n  // linkTemplate.tooltipText = \"\";\n  // linkTemplate.tooltipColorSource = false;\n  linkTemplate.colorMode = \"solid\";\n  linkTemplate.propertyFields.fill = \"linkColour\";\n  // chart.sortBy = \"value\";\n  chart.sortBy = \"name\";\n  linkTemplate.clickable = false;\n\n  var hoverState = linkTemplate.states.create(\"hover\");\n  hoverState.properties.fillOpacity = 1.0;\n  hoverState.properties.strokeOpacity = 1.0;\n\n\n    this.chart = chart;\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}